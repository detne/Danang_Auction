import React, { useEffect, useState } from 'react';
import { adminAPI } from '../../services/admin';
import { formatCurrency } from '../../utils/formatCurrency';
import { formatDate } from '../../utils/formatDate';
import '../../styles/AssetManagementAdmin.css';

const AssetManagementAdmin = () => {
  const [assets, setAssets] = useState([]);
  const [status, setStatus] = useState('PENDING_APPROVAL');
  const [keyword, setKeyword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // NEW: Th·ªëng k√™ t·ªïng quan to√†n b·ªô t√†i s·∫£n
  const [statsData, setStatsData] = useState({
    total: 0,
    pending: 0,
    approved: 0,
    rejected: 0,
  });

  // L·∫•y th·ªëng k√™ t·ª´ to√†n b·ªô danh s√°ch asset (t·ª´ backend ho·∫∑c filter l·∫°i to√†n b·ªô)
  const fetchStats = async () => {
    try {
      // N·∫øu backend c√≥ API ri√™ng, g·ªçi API th·ªëng k√™ ·ªü ƒë√¢y thay v√¨ getAssetsByStatusAndKeyword('ALL', '')
      const allAssets = await adminAPI.getAssetsByStatusAndKeyword('ALL', '');
      setStatsData({
        total: allAssets.length,
        pending: allAssets.filter(a => a.status === 'PENDING_APPROVAL').length,
        approved: allAssets.filter(a => a.status === 'APPROVED').length,
        rejected: allAssets.filter(a => a.status === 'REJECTED').length,
      });
    } catch {
      setStatsData({
        total: 0, pending: 0, approved: 0, rejected: 0
      });
    }
  };

  // L·∫•y danh s√°ch asset theo filter hi·ªán t·∫°i
  const fetchAssets = async () => {
    setLoading(true);
    setError(null);
    try {
      const res = await adminAPI.getAssetsByStatusAndKeyword(status, keyword);
      setAssets(Array.isArray(res) ? res : []);
    } catch (err) {
      setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t√†i s·∫£n. Vui l√≤ng th·ª≠ l·∫°i.');
      setAssets([]);
    } finally {
      setLoading(false);
    }
  };

  // G·ªçi l·∫°i stats khi l·∫ßn ƒë·∫ßu v√† khi duy·ªát/xo√° asset
  useEffect(() => {
    fetchStats();
  }, []);

  // Khi thay ƒë·ªïi tr·∫°ng th√°i/t·ª´ kho√° th√¨ ch·ªâ load danh s√°ch asset
  useEffect(() => {
    fetchAssets();
  }, [status]);

  const handleReview = async (id, action) => {
    const reason =
      action === 'REJECT' ? prompt('Nh·∫≠p l√Ω do t·ª´ ch·ªëi:') : 'T√†i s·∫£n h·ª£p l·ªá';
    if (action === 'REJECT' && (!reason || reason.trim() === '')) return;
    try {
      const token = localStorage.getItem('token');
      console.log('Review asset:', id, action, reason, token);
      const res = await adminAPI.reviewAsset(id, { action, reason }, token);
      // await adminAPI.reviewAsset(id, { action, reason }, token);
      alert(`${action === 'APPROVE' ? '‚úÖ ƒê√£ duy·ªát' : '‚ùå ƒê√£ t·ª´ ch·ªëi'} t√†i s·∫£n th√†nh c√¥ng`);
      fetchAssets(); // reload danh s√°ch sau khi duy·ªát/xo√°
      fetchStats();  // reload s·ªë li·ªáu th·ªëng k√™
      console.log('Review asset response:', res);
    } catch (err) {
      alert('‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω t√†i s·∫£n. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  const getStatusBadge = (status) => {
    const statusMap = {
      'PENDING_CREATE': {
        class: 'status-pending-create',
        text: 'Ch·ªù t·∫°o',
        icon: '‚è≥'
      },
      'PENDING_APPROVAL': {
        class: 'status-pending-approval',
        text: 'Ch·ªù duy·ªát',
        icon: 'üìã'
      },
      'APPROVED': {
        class: 'status-approved',
        text: 'ƒê√£ duy·ªát',
        icon: '‚úÖ'
      },
      'REJECTED': {
        class: 'status-rejected',
        text: 'B·ªã t·ª´ ch·ªëi',
        icon: '‚ùå'
      }
    };
    const statusInfo = statusMap[status] || {
      class: 'status-pending-approval',
      text: status,
      icon: '‚ùì'
    };
    return (
      <span className={`status-badge ${statusInfo.class}`}>
        {statusInfo.icon} {statusInfo.text}
      </span>
    );
  };

  return (
    <div className="asset-management-admin">
      <div className="main-container" style={{ position: 'relative' }}>
        {loading && (
          <div className="loading-overlay">
            <div className="loading-spinner"></div>
            <div className="loading-text">ƒêang t·∫£i d·ªØ li·ªáu...</div>
          </div>
        )}

        {/* Filter Section */}
        <div className="filter-section">
          <div className="filter-group">
            <label className="filter-label">Tr·∫°ng th√°i</label>
            <select
              value={status}
              onChange={(e) => setStatus(e.target.value)}
            >
              <option value="PENDING_CREATE">‚è≥ Ch·ªù t·∫°o</option>
              <option value="PENDING_APPROVAL">üìã Ch·ªù duy·ªát</option>
              <option value="APPROVED">‚úÖ ƒê√£ duy·ªát</option>
              <option value="REJECTED">‚ùå B·ªã t·ª´ ch·ªëi</option>
            </select>
          </div>

          <div className="filter-group">
            <label className="filter-label">T√¨m ki·∫øm</label>
            <input
              placeholder="Nh·∫≠p m√¥ t·∫£ t√†i s·∫£n ƒë·ªÉ t√¨m ki·∫øm..."
              value={keyword}
              onChange={(e) => setKeyword(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && !loading && fetchAssets()}
            />
          </div>

          <button
            className="btn-filter"
            onClick={fetchAssets}
            disabled={loading}
          >
            {loading ? (
              <>
                <div className="loading-spinner" style={{ width: '16px', height: '16px', margin: 0, marginBottom: 0 }}></div>
                ƒêang t·∫£i...
              </>
            ) : (
              <>
                üîç T√¨m ki·∫øm
              </>
            )}
          </button>
        </div>

        {/* Stats Section */}
        <div className="stats-section">
          <div className="stat-item">
            <span>üìä T·ªïng s·ªë:</span>
            <span className="stat-number">{statsData.total}</span>
          </div>
          <div className="stat-item">
            <span>üìã Ch·ªù duy·ªát:</span>
            <span className="stat-number">{statsData.pending}</span>
          </div>
          <div className="stat-item">
            <span>‚úÖ ƒê√£ duy·ªát:</span>
            <span className="stat-number">{statsData.approved}</span>
          </div>
          <div className="stat-item">
            <span>‚ùå T·ª´ ch·ªëi:</span>
            <span className="stat-number">{statsData.rejected}</span>
          </div>
        </div>

        {/* Error Message */}
        {error && (
          <div className="error-message">
            ‚ö†Ô∏è {error}
          </div>
        )}

        {/* Table Section */}
        {assets.length > 0 ? (
          <div className="table-container">
            <table className="asset-table">
              <thead>
                <tr>
                  <th>ID</th>
                  <th>M√£ t√†i s·∫£n</th>
                  <th>M√¥ t·∫£ t√†i s·∫£n</th>
                  <th>Gi√° kh·ªüi ƒëi·ªÉm</th>
                  <th>Tr·∫°ng th√°i</th>
                  <th>Th·ªùi gian b·∫Øt ƒë·∫ßu</th>
                  <th>Th·ªùi gian k·∫øt th√∫c</th>
                  <th style={{ textAlign: 'center' }}>H√†nh ƒë·ªông</th>
                </tr>
              </thead>
              <tbody>
                {assets.map((asset) => (
                  <tr key={asset.id}>
                    <td data-label="ID">
                      <span className="asset-id">#{asset.id || 'N/A'}</span>
                    </td>
                    <td data-label="M√£ t√†i s·∫£n">
                      <span className="asset-code">
                        {asset.document_code || 'Ch∆∞a c√≥ m√£'}
                      </span>
                    </td>
                    <td data-label="M√¥ t·∫£" className="asset-description">
                      {asset.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}
                    </td>
                    <td data-label="Gi√° kh·ªüi ƒëi·ªÉm">
                      <span className="asset-price">
                        {asset.starting_price ? formatCurrency(asset.starting_price) : 'Ch∆∞a ƒë·ªãnh gi√°'}
                      </span>
                    </td>
                    <td data-label="Tr·∫°ng th√°i">
                      {getStatusBadge(asset.status)}
                    </td>
                    <td data-label="B·∫Øt ƒë·∫ßu">
                      <span className="asset-date">
                        {asset.start_time ? formatDate(asset.start_time) : 'Ch∆∞a x√°c ƒë·ªãnh'}
                      </span>
                    </td>
                    <td data-label="K·∫øt th√∫c">
                      <span className="asset-date">
                        {asset.end_time ? formatDate(asset.end_time) : 'Ch∆∞a x√°c ƒë·ªãnh'}
                      </span>
                    </td>
                    <td data-label="H√†nh ƒë·ªông">
                      {asset.status === 'PENDING_APPROVAL' ? (
                        <div className="action-buttons">
                          <button
                            className="btn-approve"
                            onClick={() => handleReview(asset.id, 'APPROVE')}
                            title="Duy·ªát t√†i s·∫£n n√†y"
                          >
                            ‚úÖ Duy·ªát
                          </button>
                          <button
                            className="btn-reject"
                            onClick={() => handleReview(asset.id, 'REJECT')}
                            title="T·ª´ ch·ªëi t√†i s·∫£n n√†y"
                          >
                            ‚ùå T·ª´ ch·ªëi
                          </button>
                        </div>
                      ) : (
                        <span className="text-muted" style={{ fontSize: '12px' }}>
                          Kh√¥ng c√≥ h√†nh ƒë·ªông
                        </span>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          !loading && (
            <div className="empty-state">
              <div className="empty-state-icon">üì¶</div>
              <div className="empty-state-text">Kh√¥ng t√¨m th·∫•y t√†i s·∫£n</div>
              <div className="empty-state-subtext">
                Kh√¥ng c√≥ t√†i s·∫£n n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc hi·ªán t·∫°i
              </div>
            </div>
          )
        )}
      </div>
    </div>
  );
};

export default AssetManagementAdmin;
