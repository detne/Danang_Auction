import React, { useEffect, useState } from 'react';
import { adminAPI } from '../../services/admin';
import '../../styles/UserStatsTable.css';

const UserStatsTable = () => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // States cho qu·∫£n l√Ω ng∆∞·ªùi d√πng
  const [selectedTab, setSelectedTab] = useState('stats');
  const [users, setUsers] = useState([]);
  const [loadingUsers, setLoadingUsers] = useState(false);
  const [selectedUser, setSelectedUser] = useState(null);
  const [showUserDetail, setShowUserDetail] = useState(false);
  const [showVerifyModal, setShowVerifyModal] = useState(false);
  const [verifyData, setVerifyData] = useState({ status: '', reason: '' });

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        setError(null);
        const result = await adminAPI.getUserStatstats();
        setData(result);
      } catch (err) {
        console.error('L·ªói khi t·∫£i th·ªëng k√™ ng∆∞·ªùi d√πng:', err);
        setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu');
        setData(null);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  // L·∫•y danh s√°ch ng∆∞·ªùi d√πng theo tr·∫°ng th√°i
  const fetchUsersByStatus = async (status) => {
    try {
      setLoadingUsers(true);
      const token = localStorage.getItem('authToken');
      const result = await adminAPI.getUsersByStatus(status, token);
      setUsers(result.data || result);
    } catch (err) {
      console.error(`L·ªói khi t·∫£i danh s√°ch ng∆∞·ªùi d√πng ${status}:`, err);
      setUsers([]);
    } finally {
      setLoadingUsers(false);
    }
  };

  // L·∫•y chi ti·∫øt ng∆∞·ªùi d√πng
  const fetchUserDetail = async (userId) => {
    try {
      const token = localStorage.getItem('authToken');
      const result = await adminAPI.getUserDetail(userId, token);
      setSelectedUser(result.data || result);
      setShowUserDetail(true);
    } catch (err) {
      console.error('L·ªói khi t·∫£i chi ti·∫øt ng∆∞·ªùi d√πng:', err);
      alert('Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt ng∆∞·ªùi d√πng');
    }
  };

  // X√°c minh ng∆∞·ªùi d√πng
  const handleVerifyUser = async () => {
    if (!selectedUser || !verifyData.status) {
      alert('Vui l√≤ng ch·ªçn tr·∫°ng th√°i x√°c minh');
      return;
    }

    if ((verifyData.status === 'rejected' || verifyData.status === 'update-cccd') && !verifyData.reason) {
      alert('Vui l√≤ng nh·∫≠p l√Ω do');
      return;
    }

    try {
      const token = localStorage.getItem('authToken');
      await adminAPI.verifyUser(selectedUser.id, verifyData, token);
      alert('X√°c minh th√†nh c√¥ng');
      setShowVerifyModal(false);
      setVerifyData({ status: '', reason: '' });

      if (selectedTab !== 'stats') {
        fetchUsersByStatus(selectedTab);
      }
    } catch (err) {
      console.error('L·ªói khi x√°c minh ng∆∞·ªùi d√πng:', err);
      alert('X√°c minh th·∫•t b·∫°i: ' + (err.response?.data?.message || err.message));
    }
  };

  // X·ª≠ l√Ω chuy·ªÉn tab
  const handleTabChange = (tab) => {
    setSelectedTab(tab);
    if (tab !== 'stats') {
      fetchUsersByStatus(tab);
    }
  };

  // Role v√† status mapping
  const roleMapping = {
    'BIDDER': { label: 'Ng∆∞·ªùi ƒë·∫•u gi√°', icon: 'üè∑Ô∏è', color: '#3b82f6' },
    'ADMIN': { label: 'Qu·∫£n tr·ªã vi√™n', icon: 'üë®‚Äçüíº', color: '#ef4444' },
    'ORGANIZER': { label: 'T·ªï ch·ª©c vi√™n', icon: 'üìã', color: '#10b981' }
  };

  const statusMapping = {
    'ACTIVE': { label: 'Ho·∫°t ƒë·ªông', icon: '‚úÖ', color: '#10b981' },
    'INACTIVE': { label: 'Kh√¥ng ho·∫°t ƒë·ªông', icon: '‚ùå', color: '#ef4444' },
    'PENDING': { label: 'Ch·ªù duy·ªát', icon: '‚è≥', color: '#f59e0b' }
  };

  const accountTypeMapping = {
    'INDIVIDUAL': { label: 'C√° nh√¢n', icon: 'üë§' },
    'ORGANIZATION': { label: 'T·ªï ch·ª©c', icon: 'üè¢' }
  };

  const genderMapping = {
    'MALE': 'Nam',
    'FEMALE': 'N·ªØ',
    'OTHER': 'Kh√°c'
  };

  // Format date function
  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString('vi-VN');
  };

  if (loading) {
    return (
        <div className="user-stats-table">
          <div className="loading-card">
            <div className="loading-spinner"></div>
            <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
          </div>
        </div>
    );
  }

  if (error) {
    return (
        <div className="user-stats-table">
          <div className="error-card">
            <div className="error-icon">‚ö†Ô∏è</div>
            <p>{error}</p>
          </div>
        </div>
    );
  }

  const totalUsers = Object.values(data?.byRole || {}).reduce((sum, count) => sum + count, 0);

  return (
      <div className="user-stats-table">
        {/* Header v·ªõi t·ªïng quan */}
        <div className="stats-header">
          <div className="header-content">
            <div className="header-icon">üë•</div>
            <div>
              <h2>Qu·∫£n l√Ω ng∆∞·ªùi d√πng</h2>
              <p className="subtitle">T·ªïng s·ªë ng∆∞·ªùi d√πng: <span className="total-count">{totalUsers}</span></p>
            </div>
          </div>
        </div>

        {/* Navigation Tabs */}
        <div className="nav-tabs">
          <button
              className={`tab-button ${selectedTab === 'stats' ? 'active' : ''}`}
              onClick={() => handleTabChange('stats')}
          >
            üìä Th·ªëng k√™
          </button>
          <button
              className={`tab-button ${selectedTab === 'pending' ? 'active' : ''}`}
              onClick={() => handleTabChange('pending')}
          >
            ‚è≥ Ch·ªù duy·ªát
          </button>
          <button
              className={`tab-button ${selectedTab === 'approved' ? 'active' : ''}`}
              onClick={() => handleTabChange('approved')}
          >
            ‚úÖ ƒê√£ duy·ªát
          </button>
          <button
              className={`tab-button ${selectedTab === 'rejected' ? 'active' : ''}`}
              onClick={() => handleTabChange('rejected')}
          >
            ‚ùå B·ªã t·ª´ ch·ªëi
          </button>
        </div>

        {/* Content based on selected tab */}
        {selectedTab === 'stats' ? (
            /* Stats Cards */
            <div className="stats-grid">
              {/* Th·ªëng k√™ theo vai tr√≤ */}
              <div className="stats-section">
                <h3 className="section-title">
                  <span className="section-icon">üé≠</span>
                  Ph√¢n lo·∫°i theo vai tr√≤
                </h3>
                <div className="stats-cards">
                  {data?.byRole && Object.entries(data.byRole).map(([role, count]) => {
                    const roleInfo = roleMapping[role] || { label: role, icon: 'üë§', color: '#6b7280' };
                    return (
                        <div key={role} className="stat-card" style={{'--accent-color': roleInfo.color}}>
                          <div className="card-icon">{roleInfo.icon}</div>
                          <div className="card-content">
                            <div className="card-label">{roleInfo.label}</div>
                            <div className="card-value">{count}</div>
                          </div>
                          <div className="card-accent"></div>
                        </div>
                    );
                  })}
                </div>
              </div>

              {/* Th·ªëng k√™ theo tr·∫°ng th√°i */}
              <div className="stats-section">
                <h3 className="section-title">
                  <span className="section-icon">üìä</span>
                  Ph√¢n lo·∫°i theo tr·∫°ng th√°i
                </h3>
                <div className="stats-cards">
                  {data?.byStatus && Object.entries(data.byStatus).map(([status, count]) => {
                    const statusInfo = statusMapping[status] || { label: status, icon: '‚ùì', color: '#6b7280' };
                    return (
                        <div key={status} className="stat-card" style={{'--accent-color': statusInfo.color}}>
                          <div className="card-icon">{statusInfo.icon}</div>
                          <div className="card-content">
                            <div className="card-label">{statusInfo.label}</div>
                            <div className="card-value">{count}</div>
                          </div>
                          <div className="card-accent"></div>
                        </div>
                    );
                  })}
                </div>
              </div>
            </div>
        ) : (
            /* User List */
            <div className="user-list-section">
              {loadingUsers ? (
                  <div className="user-loading-spinner">ƒêang t·∫£i danh s√°ch ng∆∞·ªùi d√πng...</div>
              ) : (
                  <div className="user-table">
                    <table>
                      <thead>
                      <tr>
                        <th>ID</th>
                        <th>T√™n ƒëƒÉng nh·∫≠p</th>
                        <th>Email</th>
                        <th>S·ªë ƒëi·ªán tho·∫°i</th>
                        <th>Vai tr√≤</th>
                        <th>Lo·∫°i t√†i kho·∫£n</th>
                        <th>Tr·∫°ng th√°i x√°c minh</th>
                        <th>H√†nh ƒë·ªông</th>
                      </tr>
                      </thead>
                      <tbody>
                      {users.map(user => (
                          <tr key={user.id}>
                            <td>{user.id}</td>
                            <td>{user.username}</td>
                            <td>{user.email}</td>
                            <td>{user.phone_number}</td>
                            <td>
                        <span className={`role-badge ${user.role?.toLowerCase()}`}>
                          {roleMapping[user.role]?.label || user.role}
                        </span>
                            </td>
                            <td>
                        <span className={`account-type-badge ${user.account_type?.toLowerCase()}`}>
                          {accountTypeMapping[user.account_type]?.icon} {accountTypeMapping[user.account_type]?.label || user.account_type}
                        </span>
                            </td>
                            <td>
                        <span className={`verify-badge ${user.verified ? 'verified' : 'unverified'}`}>
                          {user.verified ? '‚úÖ ƒê√£ x√°c minh' : '‚è≥ Ch∆∞a x√°c minh'}
                        </span>
                            </td>
                            <td>
                              <div className="action-buttons">
                                <button
                                    className="btn-detail"
                                    onClick={() => fetchUserDetail(user.id)}
                                >
                                  üëÅÔ∏è Xem
                                </button>
                                {!user.verified && (
                                    <button
                                        className="btn-verify"
                                        onClick={() => {
                                          setSelectedUser(user);
                                          setShowVerifyModal(true);
                                        }}
                                    >
                                      ‚úÖ Duy·ªát
                                    </button>
                                )}
                              </div>
                            </td>
                          </tr>
                      ))}
                      </tbody>
                    </table>
                    {users.length === 0 && (
                        <div className="no-data">Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o</div>
                    )}
                  </div>
              )}
            </div>
        )}

        {/* User Detail Modal */}
        {showUserDetail && selectedUser && (
            <div className="modal-overlay" onClick={() => setShowUserDetail(false)}>
              <div className="modal-content user-detail-modal" onClick={e => e.stopPropagation()}>
                <div className="modal-header">
                  <h3>Chi ti·∫øt ng∆∞·ªùi d√πng</h3>
                  <button className="close-btn" onClick={() => setShowUserDetail(false)}>√ó</button>
                </div>
                <div className="modal-body">
                  <div className="user-detail-grid">
                    <div className="detail-section">
                      <h4>Th√¥ng tin c∆° b·∫£n</h4>
                      <p><strong>T√™n ƒëƒÉng nh·∫≠p:</strong> {selectedUser.username}</p>
                      <p><strong>Email:</strong> {selectedUser.email}</p>
                      <p><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> {selectedUser.phone_number}</p>
                      <p><strong>H·ªç t√™n:</strong> {selectedUser.first_name} {selectedUser.middle_name ? selectedUser.middle_name + ' ' : ''}{selectedUser.last_name}</p>
                      <p><strong>Gi·ªõi t√≠nh:</strong> {genderMapping[selectedUser.gender] || selectedUser.gender}</p>
                      <p><strong>Ng√†y sinh:</strong> {formatDate(selectedUser.dob)}</p>
                      <p><strong>Vai tr√≤:</strong> {roleMapping[selectedUser.role]?.label || selectedUser.role}</p>
                      <p><strong>Lo·∫°i t√†i kho·∫£n:</strong> {accountTypeMapping[selectedUser.account_type]?.label || selectedUser.account_type}</p>
                      <p><strong>Tr·∫°ng th√°i:</strong> {statusMapping[selectedUser.status]?.label || selectedUser.status}</p>
                    </div>

                    <div className="detail-section">
                      <h4>ƒê·ªãa ch·ªâ</h4>
                      <p><strong>T·ªânh/Th√†nh:</strong> {selectedUser.province}</p>
                      <p><strong>Qu·∫≠n/Huy·ªán:</strong> {selectedUser.district}</p>
                      <p><strong>Ph∆∞·ªùng/X√£:</strong> {selectedUser.ward}</p>
                      <p><strong>ƒê·ªãa ch·ªâ chi ti·∫øt:</strong> {selectedUser.detailed_address}</p>
                    </div>

                    <div className="detail-section">
                      <h4>Th√¥ng tin CCCD</h4>
                      <p><strong>S·ªë CCCD:</strong> {selectedUser.identity_number}</p>
                      <p><strong>Ng√†y c·∫•p:</strong> {formatDate(selectedUser.identity_issue_date)}</p>
                      <p><strong>N∆°i c·∫•p:</strong> {selectedUser.identity_issue_place}</p>
                    </div>

                    <div className="detail-section">
                      <h4>Th√¥ng tin ng√¢n h√†ng</h4>
                      <p><strong>S·ªë t√†i kho·∫£n:</strong> {selectedUser.bank_account_number}</p>
                      <p><strong>Ng√¢n h√†ng:</strong> {selectedUser.bank_name}</p>
                      <p><strong>Ch·ªß t√†i kho·∫£n:</strong> {selectedUser.bank_account_holder}</p>
                    </div>

                    {selectedUser.rejected_reason && (
                        <div className="detail-section rejected-reason">
                          <h4>L√Ω do t·ª´ ch·ªëi</h4>
                          <p>{selectedUser.rejected_reason}</p>
                        </div>
                    )}

                    {(selectedUser.identity_front_url || selectedUser.identity_back_url) && (
                        <div className="detail-section identity-images">
                          <h4>·∫¢nh CCCD</h4>
                          <div className="image-grid">
                            {selectedUser.identity_front_url && (
                                <div className="image-item">
                                  <p><strong>M·∫∑t tr∆∞·ªõc:</strong></p>
                                  <img
                                      src={selectedUser.identity_front_url}
                                      alt="CCCD m·∫∑t tr∆∞·ªõc"
                                      style={{
                                        maxWidth: '100%',
                                        height: 'auto',
                                        border: '1px solid #ddd',
                                        borderRadius: '8px',
                                        marginTop: '8px'
                                      }}
                                      onError={(e) => {
                                        e.target.style.display = 'none';
                                        e.target.nextSibling.style.display = 'block';
                                      }}
                                  />
                                  <div style={{display: 'none', color: '#999', fontStyle: 'italic'}}>
                                    Kh√¥ng th·ªÉ t·∫£i ·∫£nh
                                  </div>
                                </div>
                            )}
                            {selectedUser.identity_back_url && (
                                <div className="image-item">
                                  <p><strong>M·∫∑t sau:</strong></p>
                                  <img
                                      src={selectedUser.identity_back_url}
                                      alt="CCCD m·∫∑t sau"
                                      style={{
                                        maxWidth: '100%',
                                        height: 'auto',
                                        border: '1px solid #ddd',
                                        borderRadius: '8px',
                                        marginTop: '8px'
                                      }}
                                      onError={(e) => {
                                        e.target.style.display = 'none';
                                        e.target.nextSibling.style.display = 'block';
                                      }}
                                  />
                                  <div style={{display: 'none', color: '#999', fontStyle: 'italic'}}>
                                    Kh√¥ng th·ªÉ t·∫£i ·∫£nh
                                  </div>
                                </div>
                            )}
                          </div>
                        </div>
                    )}

                    {!selectedUser.identity_front_url && !selectedUser.identity_back_url && (
                        <div className="detail-section">
                          <h4>·∫¢nh CCCD</h4>
                          <p style={{color: '#999', fontStyle: 'italic'}}>Ch∆∞a c√≥ ·∫£nh CCCD</p>
                        </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
        )}

        {/* Verify User Modal */}
        {showVerifyModal && selectedUser && (
            <div className="modal-overlay" onClick={() => setShowVerifyModal(false)}>
              <div className="modal-content verify-modal" onClick={e => e.stopPropagation()}>
                <div className="modal-header">
                  <div className="modal-title">
                    <div className="verify-icon">üîç</div>
                    <div>
                      <h3>X√°c minh ng∆∞·ªùi d√πng</h3>
                      <p className="user-info">{selectedUser.username}</p>
                    </div>
                  </div>
                  <button className="close-btn" onClick={() => setShowVerifyModal(false)}>√ó</button>
                </div>

                <div className="modal-body">
                  <div className="user-summary">
                    <div className="summary-item">
                      <span className="label">H·ªç t√™n:</span>
                      <span className="value">{selectedUser.first_name} {selectedUser.middle_name ? selectedUser.middle_name + ' ' : ''}{selectedUser.last_name}</span>
                    </div>
                    <div className="summary-item">
                      <span className="label">Email:</span>
                      <span className="value">{selectedUser.email}</span>
                    </div>
                    <div className="summary-item">
                      <span className="label">S·ªë CCCD:</span>
                      <span className="value">{selectedUser.identity_number || 'Ch∆∞a c√≥'}</span>
                    </div>
                  </div>

                  <div className="form-section">
                    <div className="form-group">
                      <label className="form-label">
                        <span className="label-icon">üìã</span>
                        Tr·∫°ng th√°i x√°c minh
                      </label>
                      <select
                          className="form-select"
                          value={verifyData.status}
                          onChange={e => setVerifyData(prev => ({...prev, status: e.target.value}))}
                      >
                        <option value="">-- Ch·ªçn tr·∫°ng th√°i --</option>
                        <option value="verified">‚úÖ X√°c minh th√†nh c√¥ng</option>
                        <option value="rejected">‚ùå T·ª´ ch·ªëi</option>
                        <option value="update-cccd">üìù Y√™u c·∫ßu c·∫≠p nh·∫≠t CCCD</option>
                      </select>
                    </div>

                    {(verifyData.status === 'rejected' || verifyData.status === 'update-cccd') && (
                        <div className="form-group">
                          <label className="form-label">
                            <span className="label-icon">üìù</span>
                            L√Ω do {verifyData.status === 'rejected' ? 't·ª´ ch·ªëi' : 'y√™u c·∫ßu c·∫≠p nh·∫≠t'}
                          </label>
                          <textarea
                              className="form-textarea"
                              value={verifyData.reason}
                              onChange={e => setVerifyData(prev => ({...prev, reason: e.target.value}))}
                              placeholder={`Nh·∫≠p l√Ω do ${verifyData.status === 'rejected' ? 't·ª´ ch·ªëi' : 'y√™u c·∫ßu c·∫≠p nh·∫≠t'}...`}
                              rows={4}
                          />
                        </div>
                    )}
                  </div>

                  <div className="modal-actions">
                    <button className="btn-cancel" onClick={() => setShowVerifyModal(false)}>
                      <span>‚ùå</span>
                      H·ªßy b·ªè
                    </button>
                    <button
                        className="btn-confirm"
                        onClick={handleVerifyUser}
                        disabled={!verifyData.status}
                    >
                      <span>‚úì</span>
                      X√°c nh·∫≠n
                    </button>
                  </div>
                </div>
              </div>
            </div>
        )}
      </div>
  );
};

export default UserStatsTable;