import React, { useState, useCallback, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useUser } from '../../contexts/UserContext';
import { authAPI } from '../../services/auth';
import logo from '../../assets/logo.png';
import '../../styles/Login.css';
import { USER_ROLES } from '../../utils/constants';
import { GoogleLogin } from '@react-oauth/google';
import ErrorDialogBootstrap from '../common/ErrorDialogBootstrap';

const Login = () => {
    const navigate = useNavigate();
    const { user, setUser, loading: contextLoading, error: contextError } = useUser();
    const [formData, setFormData] = useState({
        username: localStorage.getItem('savedUsername') || '',
        password: '',
        rememberPassword: !!localStorage.getItem('savedUsername'),
    });
    const [showPassword, setShowPassword] = useState(false);
    const [error, setError] = useState(contextError || '');
    const [isLoading, setIsLoading] = useState(false);
    const [showDialog, setShowDialog] = useState(false);
    const [loginFailed, setLoginFailed] = useState(false); // ‚úÖ C·ªù login fail

    useEffect(() => {
        if (!contextLoading && user?.role && !loginFailed) {
            if (user.role === USER_ROLES.ADMIN) {
                navigate('/admin');
            } else {
                navigate('/');
            }
        }
    }, [user, contextLoading, loginFailed, navigate]);

    const handleInputChange = useCallback((e) => {
        const { name, value, type, checked } = e.target;
        if (error) setError('');
        setFormData(prev => ({
            ...prev,
            [name]: type === 'checkbox' ? checked : value,
        }));
    }, [error]);

    const handleSubmit = useCallback(async (e) => {
        e.preventDefault();

        if (!formData.username.trim()) {
            setError('Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p.');
            return;
        }
        if (!formData.password.trim()) {
            setError('Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u.');
            return;
        }

        setIsLoading(true);
        setError('');

        try {
            const response = await authAPI.login({
                username: formData.username.trim(),
                password: formData.password,
            });

            if (response && response.success) {
                const { access_token, expires_at, user: apiUser } = response.data;

                localStorage.setItem('token', access_token || token || jwt);
                localStorage.setItem('expiresAt', expires_at);
                localStorage.setItem('user', JSON.stringify(apiUser));

                if (formData.rememberPassword) {
                    localStorage.setItem('savedUsername', formData.username.trim());
                } else {
                    localStorage.removeItem('savedUsername');
                }

                setUser(apiUser);
                console.log('ƒêƒÉng nh·∫≠p th√†nh c√¥ng, vai tr√≤:', apiUser.role);
            } else {
                setError(response?.message || 'T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c.');
                setShowDialog(true);
                setLoginFailed(true); // ‚úÖ ƒê√°nh d·∫•u login th·∫•t b·∫°i
            }
        } catch (error) {
            console.error('Login error:', error);
            let errMsg = 'ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i.';
            setLoginFailed(true); // ‚úÖ Login th·∫•t b·∫°i

            if (error.response) {
                const status = error.response.status;
                const data = error.response.data;
                if (status === 401) errMsg = 'T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c.';
                else if (status === 400) errMsg = data?.message || 'Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá.';
                else if (status === 429) errMsg = 'Qu√° nhi·ªÅu l·∫ßn th·ª≠ ƒëƒÉng nh·∫≠p. Vui l√≤ng th·ª≠ l·∫°i sau.';
                else if (status === 500) errMsg = 'L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.';
                else errMsg = data?.message || errMsg;
            } else if (error.request) {
                errMsg = 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra m·∫°ng.';
            } else {
                errMsg = error.message || errMsg;
            }

            setError(errMsg);
            setShowDialog(true);
        } finally {
            setIsLoading(false);
        }
    }, [formData, setUser]);

    const handleGoogleSuccess = useCallback(async (credentialResponse) => {
        setIsLoading(true);
        setError('');

        try {
            const response = await authAPI.googleLogin({ token: credentialResponse.credential });
            if (response.success) {
                const { access_token, expires_at, user: apiUser } = response.data;
                localStorage.setItem('token', access_token);
                localStorage.setItem('expiresAt', expires_at);
                localStorage.setItem('user', JSON.stringify(apiUser));
                setUser(apiUser);
                console.log('ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng, vai tr√≤:', apiUser.role);
            } else {
                setError(response.message || 'ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i');
            }
        } catch (error) {
            console.error('L·ªói Google Login:', error.message);
            setError('ƒêƒÉng nh·∫≠p Google kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.');
        } finally {
            setIsLoading(false);
        }
    }, [setUser]);

    const handleGoogleError = useCallback(() => {
        setError('ƒêƒÉng nh·∫≠p b·∫±ng Google th·∫•t b·∫°i.');
        console.error('Google login error');
    }, []);

    const handleClose = useCallback(() => {
        navigate('/');
    }, [navigate]);

    if (contextLoading) {
        return (
            <div className="login-container">
                <div className="login-modal">
                    <div style={{ textAlign: 'center', padding: '15px' }}>
                        <div style={{ fontSize: '16px', color: '#666' }}>ƒêang t·∫£i...</div>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="login-container">
            <div className="login-modal">
                <button className="close-button" onClick={handleClose} disabled={isLoading}>‚úï</button>

                <div className="logo-section">
                    <div className="logo-container">
                        <img src={logo} alt="DaNangAuction Logo" className="logo-image" />
                    </div>
                    <h1 className="company-name">DANANGAUCTION</h1>
                </div>

                <div className="signup-prompt">
                    <span>B·∫°n ch∆∞a c√≥ t√†i kho·∫£n? </span>
                    <Link to="/signup" className="signup-link-main">ƒêƒÉng K√Ω Ngay</Link>
                </div>

                <form onSubmit={handleSubmit} className="login-form">
                    <div className="form-group">
                        <label htmlFor="username" className="form-label">T√™n ƒëƒÉng nh·∫≠p</label>
                        <input
                            type="text"
                            id="username"
                            name="username"
                            placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p"
                            value={formData.username}
                            onChange={handleInputChange}
                            className="form-input"
                            required
                            disabled={isLoading}
                            autoComplete="username"
                        />
                    </div>

                    <div className="form-group">
                        <label htmlFor="password" className="form-label">M·∫≠t kh·∫©u</label>
                        <div className="password-input-wrapper">
                            <input
                                type={showPassword ? 'text' : 'password'}
                                id="password"
                                name="password"
                                placeholder="M·∫≠t kh·∫©u"
                                value={formData.password}
                                onChange={handleInputChange}
                                className="form-input"
                                required
                                disabled={isLoading}
                                autoComplete="current-password"
                            />
                            <button
                                type="button"
                                className="password-toggle"
                                onClick={() => setShowPassword(!showPassword)}
                                disabled={isLoading}
                                aria-label={showPassword ? '·∫®n m·∫≠t kh·∫©u' : 'Hi·ªán m·∫≠t kh·∫©u'}
                            >
                                {showPassword ? 'üôà' : 'üëÅÔ∏è'}
                            </button>
                        </div>
                    </div>

                    <div className="form-group checkbox-and-forgot-row">
                        <div className="remember-password-group">
                            <div className="checkbox-wrapper">
                                <input
                                    type="checkbox"
                                    id="rememberPassword"
                                    name="rememberPassword"
                                    checked={formData.rememberPassword}
                                    onChange={handleInputChange}
                                    className="checkbox-input"
                                    disabled={isLoading}
                                />
                                <label htmlFor="rememberPassword" className="checkbox-label">
                                    <span className="checkbox-custom"></span>
                                    <span>L∆∞u m·∫≠t kh·∫©u</span>
                                </label>
                            </div>
                        </div>
                        <Link
                            to="/forgot-password"
                            className="forgot-password-link"
                            style={{
                                pointerEvents: isLoading ? 'none' : 'auto',
                                opacity: isLoading ? 0.6 : 1
                            }}
                        >
                            Qu√™n m·∫≠t kh·∫©u?
                        </Link>
                    </div>

                    <button
                        type="submit"
                        className={`login-submit-button ${isLoading ? 'loading' : ''}`}
                        disabled={isLoading}
                    >
                        {isLoading ? '' : 'ƒêƒÇNG NH·∫¨P'}
                    </button>

                    {error && <div className="error">{error}</div>}

                    <div className="google-login-wrapper" style={{ marginTop: '15px' }}>
                        <GoogleLogin
                            onSuccess={handleGoogleSuccess}
                            onError={handleGoogleError}
                            theme="outline"
                            size="large"
                            width="100%"
                            text="continue_with"
                            shape="rectangular"
                            disabled={isLoading}
                        />
                    </div>
                </form>
            </div>

            {/* ‚úÖ Popup l·ªói ƒëƒÉng nh·∫≠p (Modal) */}
            <ErrorDialogBootstrap
                show={showDialog}
                message={error}
                onClose={() => {
                    setShowDialog(false);
                    setFormData(prev => ({ ...prev, password: '' }));
                    setLoginFailed(false); // ‚úÖ reset c·ªù
                    navigate('/login');    // ‚úÖ quay v·ªÅ login sau khi OK
                }}
            />
        </div>
    );
};

export default Login;
