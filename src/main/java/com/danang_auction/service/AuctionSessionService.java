package com.danang_auction.service;

import com.danang_auction.exception.ForbiddenException;
import com.danang_auction.exception.NotFoundException;
import com.danang_auction.model.dto.session.AuctionSessionAdminDTO;
import com.danang_auction.model.dto.session.AuctionSessionDetailDTO;
import com.danang_auction.model.dto.session.AuctionSessionParticipantDTO;
import com.danang_auction.model.dto.session.AuctionSessionSummaryDTO;
import com.danang_auction.model.entity.AuctionSession;
import com.danang_auction.model.entity.AuctionSessionParticipant;
import com.danang_auction.model.entity.User;
import com.danang_auction.model.enums.AuctionType;
import com.danang_auction.model.enums.ParticipantStatus;
import com.danang_auction.model.enums.UserRole;
import com.danang_auction.repository.AuctionSessionParticipantRepository;
import com.danang_auction.repository.UserRepository;
import com.danang_auction.security.CustomUserDetails;
import com.danang_auction.util.JwtTokenProvider;
import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.stereotype.Service;
import com.danang_auction.model.entity.AuctionDocument;
import com.danang_auction.model.enums.AuctionSessionStatus;
import com.danang_auction.repository.AuctionBidRepository;
import com.danang_auction.repository.AuctionDocumentRepository;
import com.danang_auction.repository.AuctionSessionRepository;
import com.danang_auction.model.entity.AuctionBid;

import java.time.LocalDate;
import java.time.LocalDateTime;
import org.springframework.web.server.ResponseStatusException;
import org.springframework.http.HttpStatus;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.math.BigDecimal;

@Service
@RequiredArgsConstructor
public class AuctionSessionService {

    private final AuctionSessionParticipantRepository auctionSessionParticipantRepository;
    private final UserRepository userRepository;
    private final JwtTokenProvider jwtTokenProvider;
    private final AuctionSessionRepository auctionSessionRepository;
    private final AuctionDocumentRepository auctionDocumentRepository;
    private final AuctionBidRepository auctionBidRepository;

    public List<AuctionSessionParticipantDTO> getParticipantsBySessionId(Long sessionId) {
        // L·∫•y userId t·ª´ SecurityContext
        Long currentUserId = jwtTokenProvider.getCurrentUserId();
        if (currentUserId == null) {
            throw new AccessDeniedException("No authenticated user found");
        }

        // L·∫•y danh s√°ch participants
        List<AuctionSessionParticipant> participants = auctionSessionParticipantRepository
                .findByAuctionSessionId(sessionId);
        if (participants.isEmpty()) {
            throw new EntityNotFoundException("No participants found for session ID: " + sessionId);
        }

        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† organizer kh√¥ng
        AuctionSession session = participants.get(0).getAuctionSession();
        if (session == null || session.getOrganizer() == null
                || !session.getOrganizer().getId().equals(currentUserId)) {
            throw new AccessDeniedException("Only the organizer can view participants");
        }

        // √Ånh x·∫° sang DTO
        return participants.stream()
                .map(p -> new AuctionSessionParticipantDTO(
                        p.getUser().getId(),
                        p.getRole(),
                        p.getStatus(),
                        p.getDepositStatus(),
                        p.getRegisteredAt()))
                .collect(Collectors.toList());
    }

    public AuctionSession createSessionFromApprovedAsset(AuctionDocument asset) {
        User user = userRepository.findById(asset.getUser().getId())
                .orElseThrow(() -> new RuntimeException("Ng∆∞·ªùi d√πng ID " + asset.getUser().getId() + " kh√¥ng t·ªìn t·∫°i"));

        validateAuctionTime(asset.getStartTime(), asset.getEndTime());

        AuctionSession session = new AuctionSession();
        session.setSessionCode("AUC-" + System.currentTimeMillis());
        session.setTitle("Phi√™n ƒë·∫•u gi√° - " + asset.getDescription());
        session.setDescription(
                asset.getDescription() != null ? asset.getDescription() : "Phi√™n ƒë·∫•u gi√° t·ª´ t√†i s·∫£n ƒë∆∞·ª£c duy·ªát");
        session.setStatus(AuctionSessionStatus.UPCOMING);
        session.setAuctionType(asset.getAuctionType());
        session.setStartTime(asset.getStartTime());
        session.setEndTime(asset.getEndTime());
        session.setOrganizer(user);

        AuctionSession savedSession = auctionSessionRepository.save(session);

        asset.setSession(savedSession);
        auctionDocumentRepository.save(asset);

        System.out.println("üßæ ƒêang t·∫°o phi√™n cho t√†i s·∫£n: " + asset.getDocumentCode());
        System.out.println("üë§ User t·ªï ch·ª©c: " + user.getId() + ", " + user.getUsername());
        System.out.println("‚è∞ Th·ªùi gian phi√™n: " + session.getStartTime() + " - " + session.getEndTime());

        return savedSession;
    }

    private void validateAuctionTime(LocalDateTime startTime, LocalDateTime endTime) {
        if (startTime == null || endTime == null) {
            throw new ResponseStatusException(
                    HttpStatus.BAD_REQUEST,
                    "Th·ªùi gian b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        }

        LocalDateTime now = LocalDateTime.now();

        if (!startTime.isAfter(now)) {
            throw new ResponseStatusException(
                    HttpStatus.BAD_REQUEST,
                    "Th·ªùi gian b·∫Øt ƒë·∫ßu ph·∫£i sau th·ªùi gian hi·ªán t·∫°i");
        }

        if (!endTime.isAfter(startTime)) {
            throw new ResponseStatusException(
                    HttpStatus.BAD_REQUEST,
                    "Th·ªùi gian k·∫øt th√∫c ph·∫£i sau th·ªùi gian b·∫Øt ƒë·∫ßu");
        }
    }

    public List<AuctionSessionSummaryDTO> getSessionsByAssetId(Integer assetId) {
        List<AuctionSession> sessions = auctionSessionRepository.findSessionsByDocumentId(assetId);
        return sessions.stream()
                .map(session -> {
                    String thumbnailUrl = null;
                    AuctionDocument doc = session.getAuctionDocument();
                    if (doc != null && doc.getImageRelations() != null && !doc.getImageRelations().isEmpty()) {
                        thumbnailUrl = doc.getImageRelations().get(0).getImage().getUrl();
                    }
                    return new AuctionSessionSummaryDTO(session, thumbnailUrl);
                })
                .collect(Collectors.toList());
    }

    public List<AuctionSessionSummaryDTO> searchSessions(
            String title,
            String description,
            String statusStr,
            String typeStr,
            LocalDate date,
            User currentUser) {

        List<AuctionSession> sessions = auctionSessionRepository.findAll();

        return sessions.stream()
                .filter(session -> {
                    // Type (PUBLIC/PRIVATE)
                    if (typeStr != null) {
                        try {
                            AuctionType type = AuctionType.valueOf(typeStr.toUpperCase());
                            if (session.getAuctionType() != type)
                                return false;
                        } catch (Exception e) {
                            return false;
                        }
                    }
                    // Quy·ªÅn truy c·∫≠p
                    if (session.getAuctionType() == AuctionType.PUBLIC) {
                        return true;
                    } else if (session.getAuctionType() == AuctionType.PRIVATE) {
                        return currentUser != null &&
                                session.getOrganizer() != null &&
                                session.getOrganizer().getId().equals(currentUser.getId());
                    }
                    return false;
                })
                // ... c√°c filter c√≤n l·∫°i nh∆∞ c≈© ...
                .filter(session -> title == null || session.getTitle().toLowerCase().contains(title.toLowerCase()))
                .filter(session -> description == null || (session.getDescription() != null &&
                        session.getDescription().toLowerCase().contains(description.toLowerCase())))
                .filter(session -> {
                    if (statusStr == null)
                        return true;
                    try {
                        AuctionSessionStatus status = AuctionSessionStatus.valueOf(statusStr.toUpperCase());
                        boolean matchStatus = session.getStatus() == status;

                        if (status == AuctionSessionStatus.UPCOMING) {
                            return matchStatus &&
                                    session.getStartTime() != null &&
                                    session.getStartTime().isAfter(LocalDateTime.now());
                        }

                        return matchStatus;
                    } catch (IllegalArgumentException e) {
                        return false;
                    }
                })
                .filter(session -> {
                    if (date == null)
                        return true;
                    return session.getStartTime() != null &&
                            session.getStartTime().toLocalDate().isEqual(date);
                })
                .map(session -> {
                    String thumbnailUrl = null;
                    AuctionDocument doc = session.getAuctionDocument();
                    if (doc != null && doc.getImageRelations() != null && !doc.getImageRelations().isEmpty()) {
                        thumbnailUrl = doc.getImageRelations().get(0).getImage().getUrl();
                    }
                    return new AuctionSessionSummaryDTO(session, thumbnailUrl);
                })
                .collect(Collectors.toList());
    }

    public List<AuctionSessionSummaryDTO> getFinishedPublicSessions() {
        List<AuctionSession> sessions = auctionSessionRepository
                .findByStatusAndAuctionType(AuctionSessionStatus.FINISHED, AuctionType.PUBLIC);

        return sessions.stream()
                .map(session -> {
                    AuctionDocument doc = session.getAuctionDocument();
                    String thumbnailUrl = null;
                    if (doc != null && doc.getImageRelations() != null && !doc.getImageRelations().isEmpty()) {
                        thumbnailUrl = doc.getImageRelations().get(0).getImage().getUrl(); // L·∫•y ·∫£nh ƒë·∫ßu ti√™n
                    }
                    return new AuctionSessionSummaryDTO(session, thumbnailUrl);
                })
                .collect(Collectors.toList());
    }

    public AuctionSessionDetailDTO getSessionByIdWithAccessControl(Long sessionId, CustomUserDetails user) {
        // üîç T√¨m phi√™n ƒë·∫•u gi√° theo ID, bao g·ªìm document v√† participant
        AuctionSession session = auctionSessionRepository.findByIdWithDocumentAndParticipants(sessionId)
                .orElseThrow(() -> new NotFoundException("Phi√™n ƒë·∫•u gi√° kh√¥ng t·ªìn t·∫°i."));

        // üîó L·∫•y t√†i s·∫£n ch√≠nh li√™n k·∫øt v·ªõi phi√™n ƒë·∫•u gi√°
        AuctionDocument asset = auctionDocumentRepository.findBySessionId(session.getId())
                .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y t√†i s·∫£n li√™n k·∫øt v·ªõi phi√™n n√†y"));
        // CH·ªà H·ª¢P L√ù n·∫øu b·∫°n s·ª≠a m·ªëi quan h·ªá OneToOne

        if (asset == null) {
            throw new NotFoundException("T√†i s·∫£n li√™n k·∫øt v·ªõi phi√™n ƒë·∫•u gi√° kh√¥ng t·ªìn t·∫°i.");
        }

        AuctionType type = asset.getAuctionType();

        // ‚úÖ N·∫øu phi√™n l√† PUBLIC ‚Üí ai c≈©ng c√≥ th·ªÉ xem
        if (type == AuctionType.PUBLIC) {
            return new AuctionSessionDetailDTO(session, asset);
        }

        // ‚úÖ N·∫øu l√† PRIVATE ‚Üí ki·ªÉm tra quy·ªÅn truy c·∫≠p
        if (type == AuctionType.PRIVATE) {
            if (user == null) {
                throw new AccessDeniedException("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem phi√™n ƒë·∫•u gi√° ri√™ng t∆∞.");
            }

            boolean isApprovedParticipant = session.getParticipants().stream()
                    .anyMatch(p -> p.getUser().getId().equals(user.getId())
                            && p.getStatus() == ParticipantStatus.APPROVED);

            if (!isApprovedParticipant) {
                throw new AccessDeniedException("B·∫°n ch∆∞a ƒë∆∞·ª£c duy·ªát tham gia phi√™n ƒë·∫•u gi√° n√†y.");
            }

            return new AuctionSessionDetailDTO(session, asset);
        }

        throw new AccessDeniedException("Lo·∫°i phi√™n ƒë·∫•u gi√° kh√¥ng h·ª£p l·ªá.");
    }

    public AuctionSessionDetailDTO getSessionByCodeWithAccessControl(String sessionCode, CustomUserDetails user) {
        AuctionSession session = auctionSessionRepository
                .findBySessionCodeWithDocumentAndParticipants(sessionCode)
                .orElseThrow(() -> new NotFoundException("Phi√™n ƒë·∫•u gi√° kh√¥ng t·ªìn t·∫°i."));

        AuctionDocument asset = session.getAuctionDocument();
        AuctionType type = asset.getAuctionType();

        // ‚úÖ N·∫øu phi√™n l√† PUBLIC ‚Üí ai c≈©ng xem ƒë∆∞·ª£c
        if (type == AuctionType.PUBLIC) {
            return new AuctionSessionDetailDTO(session, asset);
        }

        // ‚úÖ N·∫øu l√† PRIVATE ‚Üí ki·ªÉm tra quy·ªÅn truy c·∫≠p
        if (type == AuctionType.PRIVATE) {
            if (user == null) {
                throw new AccessDeniedException("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem phi√™n ƒë·∫•u gi√° ri√™ng t∆∞.");
            }
            boolean isApprovedParticipant = session.getParticipants().stream()
                    .anyMatch(p -> p.getUser().getId().equals(user.getId())
                            && p.getStatus() == ParticipantStatus.APPROVED);

            if (!isApprovedParticipant) {
                throw new AccessDeniedException("B·∫°n ch∆∞a ƒë∆∞·ª£c duy·ªát tham gia phi√™n ƒë·∫•u gi√° n√†y.");
            }

            return new AuctionSessionDetailDTO(session, asset);
        }

        throw new AccessDeniedException("Lo·∫°i phi√™n ƒë·∫•u gi√° kh√¥ng h·ª£p l·ªá.");
    }

    public List<AuctionSessionAdminDTO> searchSessionsForAdmin(String statusStr, String keyword) {
        AuctionSessionStatus status = null;

        if (statusStr != null && !statusStr.isBlank()) {
            try {
                status = AuctionSessionStatus.valueOf(statusStr.toUpperCase());
            } catch (IllegalArgumentException e) {
                throw new IllegalArgumentException("Tr·∫°ng th√°i phi√™n kh√¥ng h·ª£p l·ªá.");
            }
        }

        String searchKeyword = keyword != null ? "%" + keyword.toLowerCase() + "%" : null;

        List<AuctionSession> sessions = auctionSessionRepository.searchSessionsByStatusAndKeyword(status,
                searchKeyword);

        return sessions.stream()
                .map(session -> {
                    AuctionDocument doc = auctionDocumentRepository.findBySession(session)
                            .orElse(null); // C√≥ th·ªÉ null n·∫øu d·ªØ li·ªáu l·ªói
                    return new AuctionSessionAdminDTO(session, doc);
                })
                .collect(Collectors.toList());
    }

    public void updateSessionVisibility(Long sessionId, Long userId, AuctionType newType) {
        AuctionSession session = auctionSessionRepository.findById(sessionId)
                .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y phi√™n ƒë·∫•u gi√°"));

        // üîç Truy ng∆∞·ª£c t·ª´ AuctionDocument v√¨ ch·ªâ chi·ªÅu document ‚Üí session t·ªìn t·∫°i
        AuctionDocument document = auctionDocumentRepository.findBySession(session)
                .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y t√†i s·∫£n ƒë·∫•u gi√° g·∫Øn v·ªõi phi√™n n√†y."));

        // üîê Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu: userId ph·∫£i l√† ng∆∞·ªùi t·∫°o document
        if (!document.getUser().getId().equals(userId)) {
            throw new ForbiddenException("B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t phi√™n n√†y.");
        }

        // üö´ Kh√¥ng cho ƒë·ªïi n·∫øu ƒë√£ duy·ªát
        if (session.getStatus() == AuctionSessionStatus.APPROVED) {
            throw new AccessDeniedException("Phi√™n ƒë√£ ƒë∆∞·ª£c duy·ªát, kh√¥ng th·ªÉ thay ƒë·ªïi h√¨nh th·ª©c.");
        }

        // ‚úÖ C·∫≠p nh·∫≠t
        session.setAuctionType(newType);
        session.setUpdatedAt(LocalDateTime.now());
        auctionSessionRepository.save(session);
    }

    public BigDecimal getCurrentPrice(Long sessionId) {
        BigDecimal price = auctionBidRepository.findCurrentPriceBySessionId(sessionId);
        return price != null ? price : BigDecimal.ZERO;
    }

    public Map<String, Object> submitBid(Long sessionId, Long userId, Double price) {
        AuctionSession session = auctionSessionRepository.findWithDocumentById(sessionId)
                .orElseThrow(() -> new RuntimeException("Phi√™n ƒë·∫•u gi√° kh√¥ng t·ªìn t·∫°i"));

        if (!AuctionSessionStatus.ACTIVE.equals(session.getStatus())) {
            throw new RuntimeException("Phi√™n ƒë·∫•u gi√° kh√¥ng ho·∫°t ƒë·ªông");
        }

        // Ki·ªÉm tra ng∆∞·ªùi tham gia
        auctionSessionParticipantRepository.findBySessionIdAndUserIdApproved(sessionId, userId)
                .orElseThrow(() -> new RuntimeException("B·∫°n ch∆∞a ƒë∆∞·ª£c duy·ªát tham gia phi√™n ƒë·∫•u gi√° n√†y"));

        // L·∫•y gi√° hi·ªán t·∫°i
        Long highestBid = auctionBidRepository.findHighestBidAmount(sessionId);
        Double currentPrice = highestBid != null ? highestBid : session.getAuctionDocument().getStartingPrice();
        Double stepPrice = session.getAuctionDocument().getStepPrice();

        // Ki·ªÉm tra h·ª£p l·ªá
        if (price < currentPrice + stepPrice ||
                (price - currentPrice) % stepPrice != 0) {
            throw new RuntimeException("Gi√° ph·∫£i l·ªõn h∆°n " + currentPrice + " v√† theo b∆∞·ªõc gi√° " + stepPrice);
        }

        // L∆∞u bid
        AuctionBid bid = new AuctionBid();
        bid.setSession(session);

        User user = new User();
        user.setId(userId);
        bid.setUser(user);

        bid.setPrice(price);
        bid.setTimestamp(LocalDateTime.now());

        auctionBidRepository.save(bid);

        return Map.of("message", "ƒê·∫•u gi√° th√†nh c√¥ng", "price", price);
    }
}