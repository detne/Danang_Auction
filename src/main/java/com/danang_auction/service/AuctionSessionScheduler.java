package com.danang_auction.service;

import com.danang_auction.model.entity.AuctionSession;
import com.danang_auction.model.enums.AuctionSessionStatus;
import com.danang_auction.repository.AuctionSessionRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class AuctionSessionScheduler {

    private final AuctionSessionRepository sessionRepository;
    private final AuctionSessionService auctionSessionService; // Service ch·ª©a h√†m closeSession

    /**
     * Cronjob ch·∫°y m·ªói ph√∫t ƒë·ªÉ update tr·∫°ng th√°i phi√™n ƒë·∫•u gi√°
     * - UPCOMING -> ACTIVE khi startTime <= now
     * - ACTIVE -> FINISHED khi endTime <= now (v√† t·ª± ƒë·ªông x·ª≠ l√Ω winner/loser)
     */
    @Scheduled(cron = "0 * * * * *") // ch·∫°y m·ªói ph√∫t
    public void updateSessionStatus() {
        LocalDateTime now = LocalDateTime.now();
        List<AuctionSession> sessions = sessionRepository.findAll();

        for (AuctionSession session : sessions) {
            // 1Ô∏è‚É£ UPCOMING -> ACTIVE
            if (session.getStatus() == AuctionSessionStatus.UPCOMING &&
                    !session.getStartTime().isAfter(now)) {
                session.setStatus(AuctionSessionStatus.ACTIVE);
                sessionRepository.save(session);
                log.info("üîÑ Phi√™n {} ƒë√£ chuy·ªÉn sang ACTIVE", session.getSessionCode());
            }

            // 2Ô∏è‚É£ ACTIVE -> FINISHED + x·ª≠ l√Ω winner/loser
            if (session.getStatus() == AuctionSessionStatus.ACTIVE &&
                    !session.getEndTime().isAfter(now)) {
                try {
                    // G·ªçi service x·ª≠ l√Ω winner/loser v√† final_price
                    auctionSessionService.closeSession(session.getId(), session.getOrganizer().getId());
                    log.info("‚úÖ Phi√™n {} ƒë√£ k·∫øt th√∫c v√† x·ª≠ l√Ω winner/loser th√†nh c√¥ng",
                            session.getSessionCode());
                } catch (Exception e) {
                    log.error("‚ùå L·ªói khi k·∫øt th√∫c phi√™n {}: {}", session.getSessionCode(), e.getMessage());
                    // fallback: v·∫´n ƒë√°nh d·∫•u FINISHED
                    session.setStatus(AuctionSessionStatus.FINISHED);
                    sessionRepository.save(session);
                }
            }
        }
    }
}
