package com.danang_auction.service;

import com.danang_auction.model.dto.payment.PaymentHistoryDTO;
import com.danang_auction.model.dto.webhook.SepayWebhookPayload;
import com.danang_auction.model.entity.AuctionSessionParticipant;
import com.danang_auction.model.entity.Payment;
import com.danang_auction.model.entity.User;
import com.danang_auction.model.enums.ParticipantStatus;
import com.danang_auction.model.enums.PaymentStatus;
import com.danang_auction.model.enums.PaymentType;
import com.danang_auction.repository.PaymentRepository;
import com.danang_auction.repository.UserRepository;
import com.danang_auction.repository.AuctionSessionParticipantRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@Slf4j
@Service
@RequiredArgsConstructor
public class PaymentService {

    private final PaymentRepository paymentRepository;
    private final UserRepository userRepository;
    private final AuctionSessionParticipantRepository participantRepository;
    private final EmailService emailService;
    // ‚úÖ T·∫°o b·∫£n ghi PENDING n·∫øu ch∆∞a c√≥
    @Transactional
    public boolean processSepayWebhook(SepayWebhookPayload payload) {
        if (!"in".equalsIgnoreCase(payload.getTransferType())) {
            log.info("üì§ B·ªè qua giao d·ªãch kh√¥ng ph·∫£i chuy·ªÉn v√†o");
            return false;
        }

        String description = payload.getDescription();
        log.info("üìú Webhook description: {}", description);

        Long userId = extractUserIdFromDescription(description);
        if (userId == null) {
            log.error("‚ùå Kh√¥ng t√¨m ƒë∆∞·ª£c userId trong description: {}", description);
            return false;
        }

        // Check duplicate referenceCode
        Optional<Payment> alreadyDone = paymentRepository.findByReferenceCode(payload.getReferenceCode());
        if (alreadyDone.isPresent()) {
            log.warn("‚ö†Ô∏è Giao d·ªãch ƒë√£ x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥: {}", payload.getReferenceCode());
            return false;
        }

        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("‚ùå Kh√¥ng t√¨m th·∫•y user ID: " + userId));

        LocalDateTime parsedTimestamp = LocalDateTime.parse(
                payload.getTransactionDate(),
                DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));

        // T√¨m pending payment n·∫øu c√≥
        Optional<Payment> pending = paymentRepository
                .findFirstByUserIdAndAmountAndStatus(userId, payload.getTransferAmount().doubleValue(),
                        PaymentStatus.PENDING);

        Payment payment = pending.orElseGet(Payment::new);
        payment.setUser(user);
        payment.setAmount(payload.getTransferAmount().doubleValue());
        payment.setReferenceCode(payload.getReferenceCode());
        payment.setStatus(PaymentStatus.COMPLETED);
        payment.setType(PaymentType.DEPOSIT);
        payment.setTransactionCode("SEPAY_" + payload.getId());
        payment.setNote("N·∫°p ti·ªÅn qua SePay");
        payment.setTimestamp(parsedTimestamp);

        paymentRepository.save(payment);

        // ‚úÖ C·ªông ti·ªÅn v√†o user balance
        user.setBalance(user.getBalance() + payment.getAmount());
        userRepository.save(user);

        log.info("‚úÖ N·∫°p ti·ªÅn th√†nh c√¥ng: +{}ƒë cho userId={} - username={}",
                payment.getAmount(), user.getId(), user.getUsername());

        // ‚úÖ Check c√°c phi√™n user ƒëang WINNER ch∆∞a thanh to√°n
        List<AuctionSessionParticipant> unpaidWinners = participantRepository.findByUserIdAndStatusAndPaymentStatus(
                user.getId(),
                ParticipantStatus.WINNER,
                PaymentStatus.UNPAID);

        for (AuctionSessionParticipant p : unpaidWinners) {
            if (user.getBalance() >= p.getFinalPrice()) {
                // T·ª± ƒë·ªông tr·ª´ ti·ªÅn v√† ƒë√°nh d·∫•u thanh to√°n
                user.setBalance(user.getBalance() - p.getFinalPrice());
                p.setPaymentStatus(PaymentStatus.PAID);
                p.setPaidAt(LocalDateTime.now());

                userRepository.save(user);
                participantRepository.save(p);

                log.info("üí∞ User {} ƒë√£ t·ª± ƒë·ªông thanh to√°n {}ƒë cho phi√™n {}",
                        user.getUsername(), p.getFinalPrice(), p.getAuctionSession().getId());

                emailService.sendAuctionWinnerPaymentSuccess(
                        user.getEmail(),
                        p.getAuctionSession().getTitle());
            }
        }

        return true;
    }

    /**
     * ‚úÖ Tr√≠ch userId t·ª´ description d·∫°ng DANANGAUCTIONUSER{userId}
     */
    private Long extractUserIdFromDescription(String description) {
        if (description == null || description.trim().isEmpty())
            return null;

        Pattern pattern = Pattern.compile("DANANGAUCTIONUSER(\\d+)", Pattern.CASE_INSENSITIVE);
        Matcher matcher = pattern.matcher(description.trim());

        if (matcher.find()) {
            return Long.valueOf(matcher.group(1));
        }

        log.error("‚ùå Kh√¥ng th·ªÉ parse userId t·ª´ description: {}", description);
        return null;
    }

    /**
     * ‚úÖ T·∫°o payment pending khi user y√™u c·∫ßu n·∫°p
     */
    @Transactional
    public void createPendingPayment(Long userId, double amount, String content) {
        // N·∫øu ch∆∞a c√≥ pending v·ªõi c√πng user + amount
        Optional<Payment> pending = paymentRepository
                .findFirstByUserIdAndAmountAndStatus(userId, amount, PaymentStatus.PENDING);

        if (pending.isPresent()) {
            log.info("‚ö†Ô∏è ƒê√£ c√≥ payment PENDING cho userId={} amount={}", userId, amount);
            return;
        }

        Payment payment = new Payment();
        payment.setUser(userRepository.getReferenceById(userId));
        payment.setAmount(amount);
        payment.setStatus(PaymentStatus.PENDING);
        payment.setType(PaymentType.DEPOSIT);
        payment.setTransactionCode("SEPAY_" + content);
        payment.setNote("Ch·ªù ng∆∞·ªùi d√πng chuy·ªÉn kho·∫£n");
        payment.setTimestamp(LocalDateTime.now());

        paymentRepository.save(payment);
    }

    public List<PaymentHistoryDTO> getMyPaymentHistory(Long userId) {
        return paymentRepository.findAllByUserId(userId).stream()
                .map(payment -> {
                    PaymentHistoryDTO dto = new PaymentHistoryDTO();
                    dto.setId(payment.getId().longValue());
                    dto.setAmount(payment.getAmount());
                    dto.setType(payment.getType());
                    dto.setStatus(payment.getStatus());
                    dto.setCreatedAt(payment.getCreatedAt());
                    return dto;
                })
                .collect(Collectors.toList());
    }

    public Long getBalanceByUserId(Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new IllegalArgumentException("User kh√¥ng t·ªìn t·∫°i v·ªõi ID: " + userId));
        Double balance = user.getBalance();
        return balance == null ? 0L : balance.longValue();
    }
}
