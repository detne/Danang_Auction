package com.danang_auction.controller;

import com.danang_auction.model.dto.webhook.SepayWebhookPayload;
import com.danang_auction.service.PaymentService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

import jakarta.servlet.http.HttpServletRequest;

@RestController
@RequestMapping("/api/webhooks")
@RequiredArgsConstructor
@Slf4j
public class SepayWebhookController {

    private final PaymentService paymentService;

    @Value("${sepay.webhook-api-key}")
    private String configuredApiKey;

    /**
     * ‚úÖ X·ª≠ l√Ω webhook SePay khi c√≥ giao d·ªãch m·ªõi
     */
    @PostMapping("/sepay-payment")
    public ResponseEntity<String> handleSepayWebhook(
            @RequestBody SepayWebhookPayload payload,
            HttpServletRequest request) {

        String authHeader = request.getHeader("Authorization");
        log.info("üì© Nh·∫≠n webhook SePay: Header = {}", authHeader);

        // Ki·ªÉm tra API Key (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng + trim)
        String expectedHeader = "Apikey " + configuredApiKey;
        if (authHeader == null || !authHeader.trim().equalsIgnoreCase(expectedHeader)) {
            log.warn("‚ùå API Key kh√¥ng h·ª£p l·ªá: {}", authHeader);
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid API Key");
        }

        // Validate payload
        if (payload == null || payload.getDescription() == null) {
            log.error("‚ùå Payload ho·∫∑c description r·ªóng!");
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body("Invalid payload");
        }

        try {
            log.info("‚úÖ Webhook h·ª£p l·ªá, payload = {}", payload);
            boolean processed = paymentService.processSepayWebhook(payload);

            if (!processed) {
                return ResponseEntity.ok("‚ö†Ô∏è Transaction ignored or already processed");
            }

            return ResponseEntity.ok("Webhook processed successfully");
        } catch (Exception ex) {
            log.error("‚ùå L·ªói x·ª≠ l√Ω webhook: {}", ex.getMessage(), ex);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Webhook processing failed");
        }
    }
}
