package com.danang_auction.controller;

import com.danang_auction.model.dto.document.AuctionDocumentDTO;
import com.danang_auction.model.dto.document.ReviewRequest;
import com.danang_auction.model.dto.session.AuctionSessionSummaryDTO;
import com.danang_auction.model.enums.AuctionDocumentStatus;
import com.danang_auction.service.AuctionDocumentService;
import lombok.RequiredArgsConstructor;

import org.apache.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/admin/assets")
@RequiredArgsConstructor
@PreAuthorize("hasRole('ADMIN')")
public class AdminAssetController {

    private final AuctionDocumentService auctionDocumentService;

    /**
     * API: GET /api/admin/assets
     * üìå Ch·ª©c nƒÉng: L·ªçc danh s√°ch t√†i s·∫£n theo tr·∫°ng th√°i v√† t·ª´ kh√≥a (status + q)
     * üîê Quy·ªÅn: ADMIN
     * üß© V√≠ d·ª•:
     * - /api/admin/assets?status=PENDING_APPROVAL
     * - /api/admin/assets?status=REJECTED&q=m√°y t√≠nh
     */
    @GetMapping
    public ResponseEntity<?> getAssetsByStatusAndKeyword(
            @RequestParam(defaultValue = "PENDING_CREATE") String status,
            @RequestParam(required = false) String q) {
        try {
            AuctionDocumentStatus enumStatus = AuctionDocumentStatus.valueOf(status.toUpperCase());
            List<AuctionDocumentDTO> result = auctionDocumentService.getAssetsByStatusAndKeyword(enumStatus, q);
            return ResponseEntity.ok(result);
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest().body("‚ùå Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá: " + status);
        }
    }

    /**
     * API: PUT /api/admin/assets/{id}/review
     * üìå Ch·ª©c nƒÉng: Admin duy·ªát ho·∫∑c t·ª´ ch·ªëi t√†i s·∫£n (APPROVE ho·∫∑c REJECT)
     * üîê Quy·ªÅn: ADMIN
     */
    @PutMapping("/{id}/review")
    public ResponseEntity<AuctionSessionSummaryDTO> reviewAsset(
            @PathVariable("id") Long id,
            @RequestBody ReviewRequest request,
            @RequestAttribute("userId") Long adminId) { // ‚úÖ l·∫•y t·ª´ middleware JWT
        System.out.println("üîê Admin ID nh·∫≠n ƒë∆∞·ª£c t·ª´ JWT: " + adminId);
        if (adminId == null) {
            throw new ResponseStatusException(HttpStatus.SC_UNAUTHORIZED, "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng", null);
        }
        AuctionSessionSummaryDTO result = auctionDocumentService.reviewAsset(
                id,
                request.getAction(),
                request.getReason(),
                adminId // ‚úÖ truy·ªÅn v√†o ƒë√¢y
        );
        return ResponseEntity.ok(result);
    }

    /**
     * API: GET /api/admin/assets/all
     * üìå Ch·ª©c nƒÉng: Tr·∫£ v·ªÅ danh s√°ch to√†n b·ªô t√†i s·∫£n trong h·ªá th·ªëng (kh√¥ng ph√¢n
     * trang)
     * üîê Quy·ªÅn: ADMIN ho·∫∑c ORGANIZER
     */
    @GetMapping("/all")
    public ResponseEntity<?> getAllAssets() {
        List<AuctionDocumentDTO> data = auctionDocumentService.getAllAssets()
                .stream()
                .map(AuctionDocumentDTO::new)
                .collect(Collectors.toList());

        return ResponseEntity.ok(Map.of("success", true, "data", data));
    }
}