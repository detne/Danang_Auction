package com.danang_auction.controller;

import com.danang_auction.model.dto.payment.DepositRequest;
import com.danang_auction.model.dto.payment.PaymentHistoryDTO;
import com.danang_auction.security.CustomUserDetails;
import com.danang_auction.service.PaymentService;
import com.danang_auction.service.SepayService;

import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@RestController
@RequestMapping("/api/user/wallet")
@RequiredArgsConstructor
public class PaymentController {

    private static final Logger log = LoggerFactory.getLogger(PaymentController.class);

    private final PaymentService paymentService;
    private final SepayService sepayService;

    // ‚úÖ 1. G·ª≠i y√™u c·∫ßu n·∫°p ti·ªÅn ‚Üí t·∫°o QR Code + L∆ØU payment PENDING
    @PostMapping("/deposit-request")
    @PreAuthorize("hasRole('BIDDER')")
    public ResponseEntity<?> createDepositQRCode(
            @RequestBody DepositRequest request,
            @AuthenticationPrincipal CustomUserDetails user) {

        Long amount = request.getAmount();
        Long userId = user.getId();

        // üìå N·ªôi dung chuy·ªÉn kho·∫£n d·∫°ng: 10000{userId}
        String content = "DANANGAUCTIONUSER" + userId;

        // ‚úÖ T·∫°o URL QR Code t·ª´ SePay
        String qrCodeUrl = sepayService.generateQRCode(amount.doubleValue(), content);

        // ‚úÖ T·∫°o payment tr·∫°ng th√°i PENDING n·∫øu ch∆∞a t·ªìn t·∫°i
        paymentService.createPendingPayment(userId, amount.doubleValue(), content);

        return ResponseEntity.ok(Map.of(
                "success", true,
                "qrUrl", qrCodeUrl,
                "content", content,
                "amount", amount));
    }

    // ‚úÖ 2. L·ªãch s·ª≠ c√°c giao d·ªãch n·∫°p ti·ªÅn c·ªßa t√¥i
    @GetMapping("/my-history")
    @PreAuthorize("hasRole('BIDDER')")
    public ResponseEntity<List<PaymentHistoryDTO>> getMyPaymentHistory(
            @AuthenticationPrincipal CustomUserDetails user) {

        List<PaymentHistoryDTO> history = paymentService.getMyPaymentHistory(user.getId());
        return ResponseEntity.ok(history);
    }

    // ‚úÖ 3. L·∫•y s·ªë d∆∞ t√†i kho·∫£n
    @GetMapping("/balance")
    @PreAuthorize("hasRole('USER')")
    public ResponseEntity<?> getBalance(@AuthenticationPrincipal CustomUserDetails user) {
        try {
            Long userId = user.getId();
            log.info("üì© L·∫•y s·ªë d∆∞ cho userId: {}", userId);

            Long balance = paymentService.getBalanceByUserId(userId);

            log.info("‚úÖ Balance for user {}: {}", userId, balance);
            return ResponseEntity.ok(Map.of("success", true, "balance", balance));

        } catch (Exception e) {
            log.error("‚ùå L·ªói khi x·ª≠ l√Ω /wallet/balance: ", e);
            return ResponseEntity.status(500).body(Map.of(
                    "success", false,
                    "message", "C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i"));
        }
    }
}
